//apply plugin: 'com.android.application'
//apply plugin: 'org.sonarqube'
//
//
//sonarqube {
//    properties {
//        property "sonar.projectName", "gg1PCI"
//        property "sonar.projectKey", "gg1PCIkey"
//        property "sonar.projectVersion", "07.00.05"
//        property "sonar.host.url", "http://14.52.161.231:50003/sonar"
//        property "sonar.language", "java"
//        property "sonar.sources", "src/main/java"
//        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.login", "bf349a6bea9b3af8b33bda5cfb58ada46e59b025"
//        property "sonar.java.binaries", "build/intermediates"
//        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
//        property "sonar.scm.disabled", "true"
//    }
//}
//
//android {
//    compileSdkVersion 22
//    defaultConfig {
//        applicationId "com.kt.gigagenie.pci"
//        minSdkVersion 22
//        targetSdkVersion 22
//    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }
//
//    applicationVariants.all { variant ->
//        variant.javaCompile.doLast {
//            runAllatori(variant)
//        }
//    }
//}
//
//dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    api 'com.android.support:support-v4:22.2.0'
//}
//
//
//def runAllatori(variant) {
//    copy {
//        from "$projectDir/allatori.xml"
//        into "$buildDir/intermediates/classes/"
//        expand(classesRoot: variant.javaCompile.destinationDir,
//                androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
//                classpathJars: variant.javaCompile.classpath.getAsPath(),
//                logFile: "allatori-log-${variant.name}.xml")
//        rename('allatori.xml', "allatori-${variant.name}.xml")
//    }
//
//    new File("${variant.javaCompile.destinationDir}-obfuscated").deleteDir()
//    javaexec {
//        main = 'com.allatori.Obfuscate'
//        classpath = files("$rootDir/allatori/allatori.jar")
//        args "$buildDir/intermediates/classes/allatori-${variant.name}.xml"
//    }
//    new File("${variant.javaCompile.destinationDir}").deleteDir()
//    new File("${variant.javaCompile.destinationDir}-obfuscated").renameTo(new File("${variant.javaCompile.destinationDir}"))
//}



apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'


//sonarqube {
//    properties {
//        property "sonar.projectName", "gg1PCI"
//        property "sonar.projectKey", "gg1PCIkey"
//        property "sonar.projectVersion", "1.0.0"
//        property "sonar.host.url", "http://14.52.161.231:50003/sonar"
//        property "sonar.language", "java"
//        property "sonar.sources", "src/main/java"
//        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.login", "bf349a6bea9b3af8b33bda5cfb58ada46e59b025"
//        property "sonar.java.binaries", "build/intermediates"
//        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
//        property "sonar.scm.disabled", "true"
//    }
//}

android {
    compileSdkVersion 30 //compileSdkVersion 28
    defaultConfig {
        applicationId "com.kt.gigagenie.pci"
        minSdkVersion 22
        targetSdkVersion 22 //targetSdkVersion 28
        versionName currentversionName("16","00","01")
        versionCode currentversionCode(16,00,01)

    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    applicationVariants.all { variant ->
        variant.javaCompile.doLast {
            runAllatori(variant)
        }
    }
}
repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //implementation 'com.android.support:support-v4:26.1.0'
    //implementation 'com.android.support:support-v4:22.2.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'

    api(name: 'kt_pns_lib_R13.03.02', ext: 'aar')  // KPNS 추가  2019.09.30 | by dalkommJK
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation project(':ktbeacon')
}


def runAllatori(variant) {
    copy {
        from "$projectDir/allatori.xml"
        into "$buildDir/intermediates/classes/"
        expand(classesRoot: variant.javaCompile.destinationDir,
                androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
                classpathJars: variant.javaCompile.classpath.getAsPath(),
                logFile: "allatori-log-${variant.name}.xml")
        rename('allatori.xml', "allatori-${variant.name}.xml")
    }

    new File("${variant.javaCompile.destinationDir}-obfuscated").deleteDir()
    javaexec {
        main = 'com.allatori.Obfuscate'
        classpath = files("$rootDir/allatori/allatori.jar")
        args "$buildDir/intermediates/classes/allatori-${variant.name}.xml"
    }
    new File("${variant.javaCompile.destinationDir}").deleteDir()
    new File("${variant.javaCompile.destinationDir}-obfuscated").renameTo(new File("${variant.javaCompile.destinationDir}"))

}
