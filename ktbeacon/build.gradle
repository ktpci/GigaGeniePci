apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
//apply from: '../gradle/version.gradle'
//apply plugin: "com.vanniktech.android.javadoc"
//android.libraryVariants.all { variant ->
//    if (variant.buildType.name == 'distributable') {
//        if (variant.mappingFile != null) {
//            tasks.create(name: "copyDistributableAarProguardMapping", type: Copy) {
//                group "distribution"
//                String today = new Date().format('yyyyMMdd_HHmmss')
//                from variant.mappingFile.path
//                rename '.*', "${project.name}_${today}_mapping.txt"
//                into rootDir
//            }
//            bundleDistributable.finalizedBy copyDistributableAarProguardMapping
//        }
//    }
//}
android.libraryVariants
publishing{
    publications{
        maven(MavenPublication) {
            groupId 'androidx.work'
            artifactId 'work-runtime'
            version '2.5.0'
            artifact("$buildDir/outputs/aar/rlgen-release.aar")
        pom.withXml {
            def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
// Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each

            configurations.implementation.allDependencies.each {
// Ensure dependencies such as fileTree are not included in the pom.
                if (it.name != 'unspecified') {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

        }

    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

}


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        // Unfortunately 'com.android.support:appcompat-v7:26.0.0'
        // requires minSdkVersion 14, forcing a bump verson minSdkVersion 7
        // But since only 0.8% of Android devices have < SDK 14 as of Une 2017, this will become
        // the new min version for this library in order to target Android O
        //applicationId "com.ktpci"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 10002
        versionName "1.0.2"
        version = android.defaultConfig.versionName
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true


        buildConfigField 'String', 'VERSION_NAME', "\"1.0.0\""

        compileOptions {
            encoding "UTF-8"
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }
            packagingOptions {
            exclude 'LICENSE.txt'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE'
        }
//        testOptions {
//            execution 'ANDROIDX_TEST_ORCHESTRATOR'
//            animationsDisabled true
//            unitTests {
//                includeAndroidResources = true
//            }
//        }
    }
    def (BOOLEAN, TRUE, FALSE) = ["boolean", "true", "false"]
    def (LOGGING, DEVELOP, PUBLISH) = ["LOGGING", "DEVELOP", "PUBLISH"]

//    buildTypes {
//        debug {
//            minifyEnabled false
//            buildConfigField BOOLEAN, LOGGING, TRUE
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//        }
//        release {
//            minifyEnabled false
//            buildConfigField BOOLEAN, LOGGING, FALSE
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//        }
//    }


    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}.aar"
            }
        }
    }


//    repositories {
//        mavenCentral()
//        flatDir {
//            dirs 'libs'
//        }
//    }


    dependencies {

        implementation fileTree(dir: 'libs', include: ['*.jar'])


        implementation 'androidx.legacy:legacy-support-v4:1.0.0'
        implementation 'androidx.annotation:annotation:1.0.0'

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.robolectric:robolectric:4.1'
        testImplementation 'com.google.android:android-test:4.1.1.4'
        testImplementation 'com.squareup:fest-android:1.0.8@aar'
        testImplementation 'org.mockito:mockito-core:2.23.4'

        androidTestUtil 'androidx.test:orchestrator:1.1.0'

        androidTestImplementation 'androidx.test:rules:1.1.0'
        androidTestImplementation 'org.apache.commons:commons-math3:3.6.1'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
        /* workmanager */
//        def work_version = "2.5.0"
//        implementation  "androidx.work:work-runtime:$work_version"
//        implementation group: 'androidx.work', name: 'work-runtime', version: '2.5.0'

//        implementation group: 'com.google.android.gms', name: 'play-services-maps', version: '12.0.0'
//        implementation "androidx.concurrent:concurrent-futures:1.1.0"
//        implementation 'com.google.guava:guava:29.0-android'

//        implementation 'work-runtime-2.5.0@aar'
//        runtimeOnly group: 'androidx.concurrent', name: 'concurrent-futures', version: '1.1.0'
        /* gson */
        //implementation 'com.google.code.gson:gson:2.8.6'
        implementation 'androidx.core:core:1.3.0-alpha02'
        implementation ('androidx.work:work-runtime:2.5.0@aar'){
            transitive = true
        }

            //compileOnly files('libs/work-runtime-2.5.0.aar')
//        }
    }
}

//apply from: '../gradle/package.gradle'


